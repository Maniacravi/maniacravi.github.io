<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Mani Ravi</title>
<link>https://maniravi.com/projects/</link>
<atom:link href="https://maniravi.com/projects/index.xml" rel="self" type="application/rss+xml"/>
<description>Mani is a Bioengineer and Data Scientist working on the intersection of Humans, Sensors and AI.</description>
<generator>quarto-1.8.24</generator>
<lastBuildDate>Thu, 25 Sep 2025 04:00:00 GMT</lastBuildDate>
<item>
  <title>Human Activity Detection using UCI’s HAR Dataset</title>
  <link>https://maniravi.com/projects/human-activity-detection/</link>
  <description><![CDATA[ 





<p>Okay, now we are stepping things up a little bit. This time, the data comes from <a href="https://archive.ics.uci.edu/dataset/240/human+activity+recognition+using+smartphones">UCI</a>. According to the website:</p>
<blockquote class="blockquote">
<p>For each record in the dataset it is provided: - Triaxial acceleration from the accelerometer (total acceleration) and the estimated body acceleration. - Triaxial Angular velocity from the gyroscope. - A 561-feature vector with time and frequency domain variables. - Its activity label. - An identifier of the subject who carried out the experiment.</p>
</blockquote>
<p>The dataset is a bit different - it’s already been divided into train and test sets but they are all text files. Once again, let’s get into it - for fun, let’s also use the same model from last time to see if that architecture still works fine for this dataset. If it doesn’t, let’s see if we can build a different one.</p>
<section id="load-data" class="level2">
<h2 class="anchored" data-anchor-id="load-data">Load Data</h2>
<p>The data is split into total, body and gyro - these are the sensor values. There’s also another dataset that has some 561 features extracted from this. Might be fun to play with them but for now, let’s focus on building our CNN network - so this ‘total’ values would be fine for now. May play with .body’ accel values later.</p>
<div id="0b7ebae3" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:342}}" data-execution_count="1">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">file_location <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/Users/manikandanravi/Code/quarto-test/uci-har-dataset/train/Inertial Signals/total_acc_x_train.txt'</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update this path to your file location</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load into pandas</span></span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> re</span>
<span id="cb1-6"></span>
<span id="cb1-7">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(file_location, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">s+'</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb1-8">display(data.head())</span>
<span id="cb1-9">data.shape</span></code></pre></div></div>
<div class="cell-output cell-output-stderr">
<pre><code>&lt;&gt;:7: SyntaxWarning: invalid escape sequence '\s'
&lt;&gt;:7: SyntaxWarning: invalid escape sequence '\s'
/var/folders/q7/ftl_yg4n1gndbwlnk654hq1h0000gn/T/ipykernel_95605/3576027909.py:7: SyntaxWarning: invalid escape sequence '\s'
  data = pd.read_csv(file_location, sep='\s+', header=None)</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">0</th>
<th data-quarto-table-cell-role="th">1</th>
<th data-quarto-table-cell-role="th">2</th>
<th data-quarto-table-cell-role="th">3</th>
<th data-quarto-table-cell-role="th">4</th>
<th data-quarto-table-cell-role="th">5</th>
<th data-quarto-table-cell-role="th">6</th>
<th data-quarto-table-cell-role="th">7</th>
<th data-quarto-table-cell-role="th">8</th>
<th data-quarto-table-cell-role="th">9</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">118</th>
<th data-quarto-table-cell-role="th">119</th>
<th data-quarto-table-cell-role="th">120</th>
<th data-quarto-table-cell-role="th">121</th>
<th data-quarto-table-cell-role="th">122</th>
<th data-quarto-table-cell-role="th">123</th>
<th data-quarto-table-cell-role="th">124</th>
<th data-quarto-table-cell-role="th">125</th>
<th data-quarto-table-cell-role="th">126</th>
<th data-quarto-table-cell-role="th">127</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<th data-quarto-table-cell-role="th">0</th>
<td>1.012817</td>
<td>1.022833</td>
<td>1.022028</td>
<td>1.017877</td>
<td>1.023680</td>
<td>1.016974</td>
<td>1.017746</td>
<td>1.019263</td>
<td>1.016417</td>
<td>1.020745</td>
<td>...</td>
<td>1.020981</td>
<td>1.018065</td>
<td>1.019638</td>
<td>1.020017</td>
<td>1.018766</td>
<td>1.019815</td>
<td>1.019290</td>
<td>1.018445</td>
<td>1.019372</td>
<td>1.021171</td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">1</th>
<td>1.018851</td>
<td>1.022380</td>
<td>1.020781</td>
<td>1.020218</td>
<td>1.021344</td>
<td>1.020522</td>
<td>1.019790</td>
<td>1.019216</td>
<td>1.018307</td>
<td>1.017996</td>
<td>...</td>
<td>1.019291</td>
<td>1.019258</td>
<td>1.020736</td>
<td>1.020950</td>
<td>1.020491</td>
<td>1.018685</td>
<td>1.015660</td>
<td>1.014788</td>
<td>1.016499</td>
<td>1.017849</td>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">2</th>
<td>1.023127</td>
<td>1.021882</td>
<td>1.019178</td>
<td>1.015861</td>
<td>1.012893</td>
<td>1.016451</td>
<td>1.020331</td>
<td>1.020266</td>
<td>1.021759</td>
<td>1.018649</td>
<td>...</td>
<td>1.020304</td>
<td>1.021516</td>
<td>1.019417</td>
<td>1.019312</td>
<td>1.019448</td>
<td>1.019434</td>
<td>1.019916</td>
<td>1.021041</td>
<td>1.022935</td>
<td>1.022019</td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">3</th>
<td>1.017682</td>
<td>1.018149</td>
<td>1.019854</td>
<td>1.019880</td>
<td>1.019121</td>
<td>1.020479</td>
<td>1.020595</td>
<td>1.016340</td>
<td>1.010611</td>
<td>1.009013</td>
<td>...</td>
<td>1.021295</td>
<td>1.022934</td>
<td>1.022183</td>
<td>1.021637</td>
<td>1.020598</td>
<td>1.018887</td>
<td>1.019161</td>
<td>1.019916</td>
<td>1.019602</td>
<td>1.020735</td>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">4</th>
<td>1.019952</td>
<td>1.019616</td>
<td>1.020933</td>
<td>1.023061</td>
<td>1.022242</td>
<td>1.020867</td>
<td>1.021939</td>
<td>1.022300</td>
<td>1.022302</td>
<td>1.022254</td>
<td>...</td>
<td>1.022687</td>
<td>1.023670</td>
<td>1.019899</td>
<td>1.017381</td>
<td>1.020389</td>
<td>1.023884</td>
<td>1.021753</td>
<td>1.019425</td>
<td>1.018896</td>
<td>1.016787</td>
</tr>
</tbody>
</table>

<p>5 rows × 128 columns</p>
</div>
</div>
<div class="cell-output cell-output-display" data-execution_count="1">
<pre><code>(7352, 128)</code></pre>
</div>
</div>
<div id="4493675e" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:293}}" data-execution_count="2">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Let's see how the labels look like</span></span>
<span id="cb4-2"></span>
<span id="cb4-3">file_location <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/Users/manikandanravi/Code/quarto-test/uci-har-dataset/train/y_train.txt'</span></span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load</span></span>
<span id="cb4-6">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(file_location, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">s+'</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb4-7">display(data.head())</span>
<span id="cb4-8">data.shape</span></code></pre></div></div>
<div class="cell-output cell-output-stderr">
<pre><code>&lt;&gt;:6: SyntaxWarning: invalid escape sequence '\s'
&lt;&gt;:6: SyntaxWarning: invalid escape sequence '\s'
/var/folders/q7/ftl_yg4n1gndbwlnk654hq1h0000gn/T/ipykernel_95605/3965665900.py:6: SyntaxWarning: invalid escape sequence '\s'
  data = pd.read_csv(file_location, sep='\s+', header=None)</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">0</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<th data-quarto-table-cell-role="th">0</th>
<td>5</td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">1</th>
<td>5</td>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">2</th>
<td>5</td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">3</th>
<td>5</td>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">4</th>
<td>5</td>
</tr>
</tbody>
</table>

</div>
</div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>(7352, 1)</code></pre>
</div>
</div>
<p>Okay looks like there are 7352 segments of windowed data with associated labels</p>
<section id="make-a-dataframe" class="level3">
<h3 class="anchored" data-anchor-id="make-a-dataframe">Make a Dataframe</h3>
<div id="dbe89b29" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-execution_count="3">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load X axis data</span></span>
<span id="cb7-2">file_location <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/Users/manikandanravi/Code/quarto-test/uci-har-dataset/train/Inertial Signals/total_acc_x_train.txt'</span></span>
<span id="cb7-3">df_total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(file_location, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">s+'</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb7-4">file_loc_body <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/Users/manikandanravi/Code/quarto-test/uci-har-dataset/train/Inertial Signals/body_acc_x_train.txt'</span></span>
<span id="cb7-5">df_body <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(file_loc_body, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">s+'</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb7-6">file_loc_gyro <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/Users/manikandanravi/Code/quarto-test/uci-har-dataset/train/Inertial Signals/body_gyro_x_train.txt'</span></span>
<span id="cb7-7">df_gyro <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(file_loc_gyro, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">s+'</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb7-8"></span>
<span id="cb7-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Append Y axis data</span></span>
<span id="cb7-10">file_location <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/Users/manikandanravi/Code/quarto-test/uci-har-dataset/train/Inertial Signals/total_acc_y_train.txt'</span></span>
<span id="cb7-11">df_total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([df_total, pd.read_csv(file_location, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">s+'</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb7-12">file_loc_body <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/Users/manikandanravi/Code/quarto-test/uci-har-dataset/train/Inertial Signals/body_acc_y_train.txt'</span></span>
<span id="cb7-13">df_body <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([df_body, pd.read_csv(file_loc_body, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">s+'</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb7-14">file_loc_gyro <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/Users/manikandanravi/Code/quarto-test/uci-har-dataset/train/Inertial Signals/body_gyro_y_train.txt'</span></span>
<span id="cb7-15">df_gyro <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([df_gyro, pd.read_csv(file_loc_gyro, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">s+'</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb7-16"></span>
<span id="cb7-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Z axis</span></span>
<span id="cb7-18">file_location <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/Users/manikandanravi/Code/quarto-test/uci-har-dataset/train/Inertial Signals/total_acc_z_train.txt'</span></span>
<span id="cb7-19">df_total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([df_total, pd.read_csv(file_location, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">s+'</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb7-20">file_loc_body <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/Users/manikandanravi/Code/quarto-test/uci-har-dataset/train/Inertial Signals/body_acc_z_train.txt'</span></span>
<span id="cb7-21">df_body <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([df_body, pd.read_csv(file_loc_body, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">s+'</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb7-22">file_loc_gyro <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/Users/manikandanravi/Code/quarto-test/uci-har-dataset/train/Inertial Signals/body_gyro_z_train.txt'</span></span>
<span id="cb7-23">df_gyro <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([df_gyro, pd.read_csv(file_loc_gyro, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">s+'</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb7-24"></span>
<span id="cb7-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Labels</span></span>
<span id="cb7-26">file_location <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/Users/manikandanravi/Code/quarto-test/uci-har-dataset/train/y_train.txt'</span></span>
<span id="cb7-27">y_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(file_location, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">s+'</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb7-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Subtract 1 from values</span></span>
<span id="cb7-29">y_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div></div>
</div>
<div id="903777cc" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-execution_count="4">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">df_total.shape, df_body.shape, y_train.shape</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>((7352, 384), (7352, 384), (7352, 1))</code></pre>
</div>
</div>
<div id="4fcab244" class="cell" data-execution_count="5">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load into 3 dimensional numpy arrays</span></span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb10-4"></span>
<span id="cb10-5">X_total_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_total.values.reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7352</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb10-6">X_body_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_body.values.reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7352</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb10-7">X_gyro_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_gyro.values.reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7352</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb10-8">y_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(y_train)</span></code></pre></div></div>
</div>
<div id="4856c8ec" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-execution_count="6">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Do the same for test data</span></span>
<span id="cb11-2"></span>
<span id="cb11-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load X axis data</span></span>
<span id="cb11-4">file_location <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/Users/manikandanravi/Code/quarto-test/uci-har-dataset/test/Inertial Signals/total_acc_x_test.txt'</span></span>
<span id="cb11-5">df_total_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(file_location, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">s+'</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb11-6">file_loc_body <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/Users/manikandanravi/Code/quarto-test/uci-har-dataset/test/Inertial Signals/body_acc_x_test.txt'</span></span>
<span id="cb11-7">df_body_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(file_loc_body, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">s+'</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb11-8">file_loc_gyro <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/Users/manikandanravi/Code/quarto-test/uci-har-dataset/test/Inertial Signals/body_gyro_x_test.txt'</span></span>
<span id="cb11-9">df_gyro <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(file_loc_gyro, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">s+'</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb11-10"></span>
<span id="cb11-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Append Y axis data</span></span>
<span id="cb11-12">file_location <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/Users/manikandanravi/Code/quarto-test/uci-har-dataset/test/Inertial Signals/total_acc_y_test.txt'</span></span>
<span id="cb11-13">df_total_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([df_total_test, pd.read_csv(file_location, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">s+'</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb11-14">file_loc_body <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/Users/manikandanravi/Code/quarto-test/uci-har-dataset/test/Inertial Signals/body_acc_y_test.txt'</span></span>
<span id="cb11-15">df_body_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([df_body_test, pd.read_csv(file_loc_body, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">s+'</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb11-16">file_loc_gyro <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/Users/manikandanravi/Code/quarto-test/uci-har-dataset/test/Inertial Signals/body_gyro_y_test.txt'</span></span>
<span id="cb11-17">df_gyro <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([df_gyro, pd.read_csv(file_loc_gyro, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">s+'</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb11-18"></span>
<span id="cb11-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Z axis</span></span>
<span id="cb11-20">file_location <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/Users/manikandanravi/Code/quarto-test/uci-har-dataset/test/Inertial Signals/total_acc_z_test.txt'</span></span>
<span id="cb11-21">df_total_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([df_total_test, pd.read_csv(file_location, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">s+'</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb11-22">file_loc_body <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/Users/manikandanravi/Code/quarto-test/uci-har-dataset/test/Inertial Signals/body_acc_z_test.txt'</span></span>
<span id="cb11-23">df_body_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([df_body_test, pd.read_csv(file_loc_body, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">s+'</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb11-24">file_loc_gyro <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/Users/manikandanravi/Code/quarto-test/uci-har-dataset/test/Inertial Signals/body_gyro_z_test.txt'</span></span>
<span id="cb11-25">df_gyro <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([df_gyro, pd.read_csv(file_loc_gyro, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">s+'</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb11-26"></span>
<span id="cb11-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Labels</span></span>
<span id="cb11-28">file_location <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/Users/manikandanravi/Code/quarto-test/uci-har-dataset/test/y_test.txt'</span></span>
<span id="cb11-29">y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(file_location, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">s+'</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb11-30">y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb11-31"></span>
<span id="cb11-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert to numpy arrays</span></span>
<span id="cb11-33">X_total_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_total_test.values.reshape(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(df_total_test), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb11-34">X_body_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_body_test.values.reshape(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(df_body_test), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb11-35">X_gyro_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_gyro.values.reshape(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(df_gyro), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb11-36">y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(y_test)</span>
<span id="cb11-37"></span>
<span id="cb11-38"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Shapes of test data:"</span>)</span>
<span id="cb11-39"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X_total_test:"</span>, X_total_test.shape)</span>
<span id="cb11-40"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X_body_test:"</span>, X_body_test.shape)</span>
<span id="cb11-41"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X_gyro_test:"</span>, X_gyro_test.shape)</span>
<span id="cb11-42"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y_test:"</span>, y_test.shape)</span></code></pre></div></div>
</div>
<p>OKay, now we have the data. Let’s get to work on building dataloaders and the models</p>
</section>
</section>
<section id="build-model" class="level2">
<h2 class="anchored" data-anchor-id="build-model">Build Model</h2>
<section id="data-loader" class="level3">
<h3 class="anchored" data-anchor-id="data-loader">Data Loader</h3>
<div id="92860c7d" class="cell" data-execution_count="7">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb12-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb12-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Dataset, DataLoader</span>
<span id="cb12-4"></span>
<span id="cb12-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dataset wrapper</span></span>
<span id="cb12-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> UCIDatasetWrapper(Dataset):</span>
<span id="cb12-7">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, X, y):</span>
<span id="cb12-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert (N, T, C) -&gt; (N, C, T) for Conv1D</span></span>
<span id="cb12-9">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(X.transpose(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.float32)</span>
<span id="cb12-10">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(y, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">long</span>)</span>
<span id="cb12-11"></span>
<span id="cb12-12">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__len__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb12-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y)</span>
<span id="cb12-14"></span>
<span id="cb12-15">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__getitem__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, i):</span>
<span id="cb12-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.X[i], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y[i]</span></code></pre></div></div>
</div>
<div id="31bebb4c" class="cell" data-execution_count="8">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">  train_ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> UCIDatasetWrapper(X_total_train, y_train)</span>
<span id="cb13-2">  train_ds_body <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> UCIDatasetWrapper(X_body_train, y_train)</span>
<span id="cb13-3">  test_ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> UCIDatasetWrapper(X_total_test, y_test)</span>
<span id="cb13-4">  test_ds_body <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> UCIDatasetWrapper(X_body_test, y_test)</span>
<span id="cb13-5"></span>
<span id="cb13-6">  train_dl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(train_ds, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb13-7">  train_dl_body <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(train_ds_body, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb13-8">  test_dl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(test_ds, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div></div>
</div>
</section>
<section id="model" class="level3">
<h3 class="anchored" data-anchor-id="model">Model</h3>
<p>Lets use the same model from the <a href="https://colab.research.google.com/drive/1An5hpfwl3Jv0iM5qd3wFF2sbwfmGaN4R?usp=sharing">previous notbook</a></p>
<div id="66c30242" class="cell" data-execution_count="9">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1D CNN model (Same as our previous notebook)</span></span>
<span id="cb14-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span>
<span id="cb14-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> HAR1DCNN(nn.Module):</span>
<span id="cb14-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, in_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, n_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># adjust n_classes!</span></span>
<span id="cb14-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb14-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Conv1d(in_channels, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb14-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bn1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.BatchNorm1d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>)</span>
<span id="cb14-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Conv1d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb14-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bn2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.BatchNorm1d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>)</span>
<span id="cb14-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pool <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.MaxPool1d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb14-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Conv1d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb14-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bn3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.BatchNorm1d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>)</span>
<span id="cb14-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.global_pool <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.AdaptiveAvgPool1d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb14-14">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, n_classes)</span>
<span id="cb14-15"></span>
<span id="cb14-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb14-17">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.relu(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bn1(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv1(x)))</span>
<span id="cb14-18">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pool(x)          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (N, 32, 20)</span></span>
<span id="cb14-19">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.relu(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bn2(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv2(x)))</span>
<span id="cb14-20">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pool(x)          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (N, 64, 10)</span></span>
<span id="cb14-21">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.relu(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bn3(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv3(x)))</span>
<span id="cb14-22">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.global_pool(x).squeeze(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (N, 128)</span></span>
<span id="cb14-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc(x)</span></code></pre></div></div>
</div>
</section>
</section>
<section id="train-the-model" class="level2">
<h2 class="anchored" data-anchor-id="train-the-model">Train the model</h2>
<div id="b98c3b2b" class="cell" data-execution_count="10">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.device(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> torch.cuda.is_available() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cpu"</span>)</span>
<span id="cb15-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> device.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span>:</span>
<span id="cb15-3">  device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.device(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mps"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> torch.backends.mps.is_available() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cpu"</span>)</span>
<span id="cb15-4"></span>
<span id="cb15-5">n_classes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(torch.unique(torch.tensor(y_train)))</span>
<span id="cb15-6">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HAR1DCNN(in_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, n_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_classes).to(device)</span></code></pre></div></div>
</div>
<div id="f274efb3" class="cell" data-execution_count="11">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Optimizer and loss function</span></span>
<span id="cb16-2">optim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.Adam(model.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-3</span>)</span>
<span id="cb16-3">loss_fn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.CrossEntropyLoss()</span></code></pre></div></div>
</div>
<div id="be86c977" class="cell" data-execution_count="12">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> run_epoch(loader, train<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>):</span>
<span id="cb17-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> train:</span>
<span id="cb17-3">    model.train()</span>
<span id="cb17-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb17-5">    model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span>
<span id="cb17-6">  total_loss, correct, total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb17-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> Xb, yb <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> loader:</span>
<span id="cb17-8">    Xb, yb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Xb.to(device), yb.to(device)</span>
<span id="cb17-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> train:</span>
<span id="cb17-10">      optim.zero_grad()</span>
<span id="cb17-11">    out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(Xb)</span>
<span id="cb17-12">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loss_fn(out, yb.squeeze()) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Removed - 1</span></span>
<span id="cb17-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> train:</span>
<span id="cb17-14">      loss.backward()</span>
<span id="cb17-15">      optim.step()</span>
<span id="cb17-16"></span>
<span id="cb17-17">    total_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> loss.item() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> Xb.size(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb17-18">    preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> out.argmax(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb17-19"></span>
<span id="cb17-20">    correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> (preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> yb.squeeze()).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>().item() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Removed - 1</span></span>
<span id="cb17-21">    total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> Xb.size(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb17-22">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> total_loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>total, correct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>total</span></code></pre></div></div>
</div>
<div id="91d5eebf" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-execution_count="13">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb18-2">  train_loss, train_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_epoch(train_dl)</span>
<span id="cb18-3">  test_loss, test_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_epoch(test_dl, train<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb18-4">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Epoch </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: train_loss=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>train_loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, train_acc=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>train_acc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, test_loss=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>test_loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, test_acc=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>test_acc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch 1: train_loss=0.5845, train_acc=0.8229, test_loss=0.3221, test_acc=0.8792
Epoch 2: train_loss=0.2579, train_acc=0.9110, test_loss=0.2817, test_acc=0.8816
Epoch 3: train_loss=0.1922, train_acc=0.9272, test_loss=0.2426, test_acc=0.9043
Epoch 4: train_loss=0.1741, train_acc=0.9301, test_loss=0.2714, test_acc=0.8870
Epoch 5: train_loss=0.1632, train_acc=0.9359, test_loss=0.3476, test_acc=0.8680
Epoch 6: train_loss=0.1580, train_acc=0.9366, test_loss=0.3187, test_acc=0.8782
Epoch 7: train_loss=0.1492, train_acc=0.9372, test_loss=0.4305, test_acc=0.8375
Epoch 8: train_loss=0.1347, train_acc=0.9441, test_loss=0.2659, test_acc=0.8975
Epoch 9: train_loss=0.1397, train_acc=0.9419, test_loss=0.5809, test_acc=0.8154
Epoch 10: train_loss=0.1434, train_acc=0.9418, test_loss=0.2682, test_acc=0.9155</code></pre>
</div>
</div>
</section>
<section id="evaluate-model" class="level2">
<h2 class="anchored" data-anchor-id="evaluate-model">Evaluate model</h2>
<div id="2a2ef5f6" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:735}}" data-execution_count="14">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Evaluate the model - get F1 score, confusion matrix</span></span>
<span id="cb20-2"></span>
<span id="cb20-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> f1_score, confusion_matrix</span>
<span id="cb20-4"></span>
<span id="cb20-5">model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span>
<span id="cb20-6">y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb20-7">y_true <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb20-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb20-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> Xb, yb <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> test_dl:</span>
<span id="cb20-10">        Xb, yb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Xb.to(device), yb.to(device)</span>
<span id="cb20-11">        out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(Xb)</span>
<span id="cb20-12">        preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> out.argmax(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb20-13">        y_pred.extend(preds.cpu().numpy())</span>
<span id="cb20-14">        y_true.extend(yb.cpu().numpy())</span>
<span id="cb20-15"></span>
<span id="cb20-16">f1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f1_score(y_true, y_pred, average<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'macro'</span>)</span>
<span id="cb20-17">cm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> confusion_matrix(y_true, y_pred)</span>
<span id="cb20-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'F1 score: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>f1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb20-19"></span>
<span id="cb20-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># PLot confusion matrix</span></span>
<span id="cb20-21"></span>
<span id="cb20-22"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb20-23"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb20-24"></span>
<span id="cb20-25">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb20-26">sns.heatmap(cm, annot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, fmt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'d'</span>, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Blues'</span>)</span>
<span id="cb20-27">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>)</span>
<span id="cb20-28">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'True'</span>)</span>
<span id="cb20-29">plt.title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Confusion Matrix (F1 score= </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>f1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span>)</span>
<span id="cb20-30">plt.xticks([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.5</span>], [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Walking'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Upstairs'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Downstairs'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sitting'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Standing'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Laying'</span>])</span>
<span id="cb20-31">plt.yticks([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.5</span>], [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Walking'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Upstairs'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Downstairs'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sitting'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Standing'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Laying]'</span>])</span>
<span id="cb20-32">plt.show()</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>F1 score: 0.9154</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://maniravi.com/projects/human-activity-detection/index_files/figure-html/cell-15-output-2.png" width="757" height="671" class="figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="changing-data" class="level2">
<h2 class="anchored" data-anchor-id="changing-data">Changing Data</h2>
<p>What if we train the model just with the ‘body’ accelerometer data?</p>
<p>Just to recap: &gt; The sensor signals (accelerometer and gyroscope) were pre-processed by applying noise filters and then sampled in fixed-width sliding windows of 2.56 sec and 50% overlap (128 readings/window). The sensor acceleration signal, which has gravitational and body motion components, was separated using a Butterworth low-pass filter into body acceleration and gravity. The gravitational force is assumed to have only low frequency components, therefore a filter with 0.3 Hz cutoff frequency was used. From each window, a vector of features was obtained by calculating variables from the time and frequency domain.</p>
<div id="e7258ba3" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-execution_count="15">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb22-2">  train_loss, train_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_epoch(train_dl_body)</span>
<span id="cb22-3">  test_loss, test_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_epoch(test_dl, train<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb22-4">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Epoch </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: train_loss=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>train_loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, train_acc=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>train_acc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, test_loss=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>test_loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, test_acc=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>test_acc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch 1: train_loss=0.7097, train_acc=0.6035, test_loss=9.6068, test_acc=0.1863
Epoch 2: train_loss=0.6705, train_acc=0.6200, test_loss=8.4766, test_acc=0.2457
Epoch 3: train_loss=0.6396, train_acc=0.6333, test_loss=12.5178, test_acc=0.3115
Epoch 4: train_loss=0.6429, train_acc=0.6291, test_loss=14.8952, test_acc=0.1982
Epoch 5: train_loss=0.6350, train_acc=0.6362, test_loss=10.3467, test_acc=0.3135
Epoch 6: train_loss=0.6207, train_acc=0.6472, test_loss=12.0206, test_acc=0.2100
Epoch 7: train_loss=0.6333, train_acc=0.6425, test_loss=10.5265, test_acc=0.2976
Epoch 8: train_loss=0.6232, train_acc=0.6479, test_loss=14.7182, test_acc=0.2704
Epoch 9: train_loss=0.6213, train_acc=0.6439, test_loss=16.1825, test_acc=0.2307
Epoch 10: train_loss=0.6098, train_acc=0.6591, test_loss=18.7088, test_acc=0.2121</code></pre>
</div>
</div>
<div id="a0e23ed3" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:735}}" data-execution_count="16">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Evaluate the model - get F1 score, confusion matrix</span></span>
<span id="cb24-2"></span>
<span id="cb24-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> f1_score, confusion_matrix</span>
<span id="cb24-4"></span>
<span id="cb24-5">model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span>
<span id="cb24-6">y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb24-7">y_true <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb24-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb24-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> Xb, yb <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> test_dl:</span>
<span id="cb24-10">        Xb, yb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Xb.to(device), yb.to(device)</span>
<span id="cb24-11">        out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(Xb)</span>
<span id="cb24-12">        preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> out.argmax(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb24-13">        y_pred.extend(preds.cpu().numpy())</span>
<span id="cb24-14">        y_true.extend(yb.cpu().numpy())</span>
<span id="cb24-15"></span>
<span id="cb24-16">f1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f1_score(y_true, y_pred, average<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'macro'</span>)</span>
<span id="cb24-17">cm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> confusion_matrix(y_true, y_pred)</span>
<span id="cb24-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'F1 score: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>f1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb24-19"></span>
<span id="cb24-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># PLot confusion matrix</span></span>
<span id="cb24-21"></span>
<span id="cb24-22"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb24-23"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb24-24"></span>
<span id="cb24-25">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb24-26">sns.heatmap(cm, annot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, fmt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'d'</span>, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Blues'</span>)</span>
<span id="cb24-27">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>)</span>
<span id="cb24-28">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'True'</span>)</span>
<span id="cb24-29">plt.title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Confusion Matrix (F1 score= </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>f1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span>)</span>
<span id="cb24-30">plt.xticks([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.5</span>], [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Walking'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Upstairs'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Downstairs'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sitting'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Standing'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Laying'</span>])</span>
<span id="cb24-31">plt.yticks([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.5</span>], [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Walking'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Upstairs'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Downstairs'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sitting'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Standing'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Laying]'</span>])</span>
<span id="cb24-32">plt.show()</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>F1 score: 0.1105</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://maniravi.com/projects/human-activity-detection/index_files/figure-html/cell-17-output-2.png" width="757" height="671" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>As we can see (and intutitively expect), if we take out the gravitational component, the accuracy values are pretty poor. What if we feed all these 9 vectors in?</p>
</section>
<section id="running-the-model-with-all-the-data" class="level2">
<h2 class="anchored" data-anchor-id="running-the-model-with-all-the-data">Running the model with all the data</h2>
<div id="dc54f129" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:86}}" data-execution_count="17">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Concatenate total, body and gyro</span></span>
<span id="cb26-2"></span>
<span id="cb26-3">X_all_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.concat((X_total_train, X_body_train, X_gyro_train), axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb26-4">display(X_all_train.shape, y_train.shape) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># We should have 9 channels now</span></span>
<span id="cb26-5">X_all_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.concat((X_total_test, X_body_test, X_gyro_test), axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb26-6">display(X_all_test.shape, y_test.shape)</span></code></pre></div></div>
<div class="cell-output cell-output-display">
<pre><code>(7352, 128, 9)</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>(7352, 1)</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>(2947, 128, 9)</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>(2947, 1)</code></pre>
</div>
</div>
<div id="995e811b" class="cell" data-execution_count="18">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create data loaders</span></span>
<span id="cb31-2"></span>
<span id="cb31-3">train_ds_all <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> UCIDatasetWrapper(X_all_train, y_train)</span>
<span id="cb31-4">train_dl_all <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(train_ds_all, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb31-5">test_ds_all <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> UCIDatasetWrapper(X_all_test, y_test)</span>
<span id="cb31-6">test_dl_all <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(test_ds_all, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div></div>
</div>
<div id="96ae5f91" class="cell" data-execution_count="19">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># We need a new model with 9 channels</span></span>
<span id="cb32-2"></span>
<span id="cb32-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> HAR1DCNN_9ch(nn.Module):</span>
<span id="cb32-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, in_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, n_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># adjust n_classes!</span></span>
<span id="cb32-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb32-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Conv1d(in_channels, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb32-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bn1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.BatchNorm1d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>)</span>
<span id="cb32-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Conv1d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb32-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bn2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.BatchNorm1d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>)</span>
<span id="cb32-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pool <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.MaxPool1d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb32-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Conv1d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb32-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bn3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.BatchNorm1d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>)</span>
<span id="cb32-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.global_pool <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.AdaptiveAvgPool1d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb32-14">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, n_classes)</span>
<span id="cb32-15"></span>
<span id="cb32-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb32-17">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.relu(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bn1(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv1(x)))</span>
<span id="cb32-18">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pool(x)          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (N, 32, 20)</span></span>
<span id="cb32-19">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.relu(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bn2(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv2(x)))</span>
<span id="cb32-20">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pool(x)          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (N, 64, 10)</span></span>
<span id="cb32-21">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.relu(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bn3(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv3(x)))</span>
<span id="cb32-22">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.global_pool(x).squeeze(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (N, 128)</span></span>
<span id="cb32-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc(x)</span></code></pre></div></div>
</div>
<section id="train-the-new-model" class="level3">
<h3 class="anchored" data-anchor-id="train-the-new-model">Train the new model</h3>
<div id="c3391201" class="cell" data-execution_count="20">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.device(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> torch.cuda.is_available() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cpu"</span>)</span>
<span id="cb33-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> device.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span>:</span>
<span id="cb33-3">  device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.device(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mps"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> torch.backends.mps.is_available() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cpu"</span>)</span>
<span id="cb33-4">n_classes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(torch.unique(torch.tensor(y_train)))</span>
<span id="cb33-5">model_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HAR1DCNN_9ch(in_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, n_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_classes).to(device)</span></code></pre></div></div>
</div>
<div id="ed85ccaf" class="cell" data-execution_count="21">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Optimizer and loss function</span></span>
<span id="cb34-2">optim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.Adam(model_2.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-3</span>)</span>
<span id="cb34-3">loss_fn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.CrossEntropyLoss()</span></code></pre></div></div>
</div>
<div id="0e56d381" class="cell" data-execution_count="22">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> run_epoch(loader, train<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>):</span>
<span id="cb35-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> train:</span>
<span id="cb35-3">    model_2.train()</span>
<span id="cb35-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb35-5">    model_2.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span>
<span id="cb35-6">  total_loss, correct, total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb35-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> Xb, yb <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> loader:</span>
<span id="cb35-8">    Xb, yb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Xb.to(device), yb.to(device)</span>
<span id="cb35-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> train:</span>
<span id="cb35-10">      optim.zero_grad()</span>
<span id="cb35-11">    out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_2(Xb)</span>
<span id="cb35-12">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loss_fn(out, yb.squeeze())</span>
<span id="cb35-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> train:</span>
<span id="cb35-14">      loss.backward()</span>
<span id="cb35-15">      optim.step()</span>
<span id="cb35-16"></span>
<span id="cb35-17">    total_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> loss.item() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> Xb.size(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb35-18">    preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> out.argmax(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb35-19"></span>
<span id="cb35-20">    correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> (preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> yb.squeeze()).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>().item()</span>
<span id="cb35-21">    total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> Xb.size(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb35-22">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> total_loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>total, correct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>total</span></code></pre></div></div>
</div>
<div id="bf9226df" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-execution_count="23">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>):</span>
<span id="cb36-2">  train_loss, train_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_epoch(train_dl_all)</span>
<span id="cb36-3">  test_loss, test_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_epoch(test_dl_all, train<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb36-4">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Epoch </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: train_loss=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>train_loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, train_acc=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>train_acc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, test_loss=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>test_loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, test_acc=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>test_acc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch 1: train_loss=0.6184, train_acc=0.7956, test_loss=0.3463, test_acc=0.8768
Epoch 2: train_loss=0.2316, train_acc=0.9206, test_loss=0.2765, test_acc=0.9179
Epoch 3: train_loss=0.1717, train_acc=0.9327, test_loss=0.2674, test_acc=0.8965
Epoch 4: train_loss=0.1565, train_acc=0.9372, test_loss=0.2246, test_acc=0.9250
Epoch 5: train_loss=0.1411, train_acc=0.9419, test_loss=0.2674, test_acc=0.9030
Epoch 6: train_loss=0.1343, train_acc=0.9450, test_loss=0.2528, test_acc=0.9125
Epoch 7: train_loss=0.1221, train_acc=0.9464, test_loss=0.2397, test_acc=0.9128
Epoch 8: train_loss=0.1218, train_acc=0.9468, test_loss=0.2297, test_acc=0.9284
Epoch 9: train_loss=0.1231, train_acc=0.9459, test_loss=0.2474, test_acc=0.9315
Epoch 10: train_loss=0.1161, train_acc=0.9506, test_loss=0.2374, test_acc=0.9270
Epoch 11: train_loss=0.1180, train_acc=0.9479, test_loss=0.2367, test_acc=0.9196
Epoch 12: train_loss=0.1165, train_acc=0.9499, test_loss=0.2830, test_acc=0.8972
Epoch 13: train_loss=0.1171, train_acc=0.9493, test_loss=0.5716, test_acc=0.8392
Epoch 14: train_loss=0.1179, train_acc=0.9480, test_loss=0.2171, test_acc=0.9362
Epoch 15: train_loss=0.1111, train_acc=0.9527, test_loss=0.2389, test_acc=0.9260
Epoch 16: train_loss=0.1070, train_acc=0.9546, test_loss=0.2823, test_acc=0.9050
Epoch 17: train_loss=0.1177, train_acc=0.9521, test_loss=0.2516, test_acc=0.9182
Epoch 18: train_loss=0.1094, train_acc=0.9538, test_loss=0.2291, test_acc=0.9301
Epoch 19: train_loss=0.1021, train_acc=0.9577, test_loss=0.2268, test_acc=0.9325
Epoch 20: train_loss=0.1058, train_acc=0.9562, test_loss=0.2266, test_acc=0.9291</code></pre>
</div>
</div>
<div id="e4c74e76" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:735}}" data-execution_count="24">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Evaluate the model - get F1 score, confusion matrix</span></span>
<span id="cb38-2"></span>
<span id="cb38-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> f1_score, confusion_matrix</span>
<span id="cb38-4"></span>
<span id="cb38-5">model_2.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span>
<span id="cb38-6">y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb38-7">y_true <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb38-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb38-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> Xb, yb <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> test_dl_all:</span>
<span id="cb38-10">        Xb, yb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Xb.to(device), yb.to(device)</span>
<span id="cb38-11">        out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_2(Xb)</span>
<span id="cb38-12">        preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> out.argmax(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb38-13">        y_pred.extend(preds.cpu().numpy())</span>
<span id="cb38-14">        y_true.extend(yb.cpu().numpy())</span>
<span id="cb38-15"></span>
<span id="cb38-16">f1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f1_score(y_true, y_pred, average<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'macro'</span>)</span>
<span id="cb38-17">cm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> confusion_matrix(y_true, y_pred)</span>
<span id="cb38-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'F1 score: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>f1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb38-19"></span>
<span id="cb38-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># PLot confusion matrix</span></span>
<span id="cb38-21"></span>
<span id="cb38-22"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb38-23"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb38-24"></span>
<span id="cb38-25">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb38-26">sns.heatmap(cm, annot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, fmt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'d'</span>, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Blues'</span>)</span>
<span id="cb38-27">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>)</span>
<span id="cb38-28">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'True'</span>)</span>
<span id="cb38-29">plt.title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Confusion Matrix (F1 score= </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>f1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span>)</span>
<span id="cb38-30">plt.xticks([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.5</span>], [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Walking'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Upstairs'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Downstairs'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sitting'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Standing'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Laying'</span>])</span>
<span id="cb38-31">plt.yticks([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.5</span>], [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Walking'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Upstairs'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Downstairs'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sitting'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Standing'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Laying]'</span>])</span>
<span id="cb38-32">plt.show()</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>F1 score: 0.9303</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://maniravi.com/projects/human-activity-detection/index_files/figure-html/cell-25-output-2.png" width="757" height="671" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>As we can see, this has improved on the accuracy on our first model (albeit, not by a lot - because our first model was already quite good).</p>


</section>
</section>

 ]]></description>
  <category>IMU</category>
  <category>Gait</category>
  <category>Human Activity</category>
  <category>Machine Learning</category>
  <category>CNN</category>
  <guid>https://maniravi.com/projects/human-activity-detection/</guid>
  <pubDate>Thu, 25 Sep 2025 04:00:00 GMT</pubDate>
</item>
</channel>
</rss>
